import React, { useState, useEffect } from 'react';import axios from 'axios';const AdminDashboard = () => {  const [courses, setCourses] = useState([]);  const [loading, setLoading] = useState(true);  const [error, setError] = useState('');  const [showCreateForm, setShowCreateForm] = useState(false);  const [editingCourse, setEditingCourse] = useState(null);    const [courseForm, setCourseForm] = useState({    title: '',    description: '',    price: '',    imageUrl: ''  });  useEffect(() => {    fetchCourses();  }, []);  const fetchCourses = async () => {    try {      const token = localStorage.getItem('adminToken');      const response = await axios.post('http://localhost:3000/admin/coursedisplay', {}, {        headers: { token }      });      setCourses(response.data.course || []);    } catch (error) {      setError('Failed to fetch courses');    } finally {      setLoading(false);    }  };  const handleCreateCourse = async (e) => {    e.preventDefault();    setLoading(true);    try {      const token = localStorage.getItem('adminToken');      const response = await axios.post('http://localhost:3000/admin/createcourse', {        title: courseForm.title,        description: courseForm.description,        price: parseFloat(courseForm.price),        imageUrl: courseForm.imageUrl      }, {        headers: { token }      });      if (response.data.message === 'Course Created') {        setCourseForm({ title: '', description: '', price: '', imageUrl: '' });        setShowCreateForm(false);        fetchCourses();        alert('Course created successfully!');      }    } catch (error) {      alert('Failed to create course');    } finally {      setLoading(false);    }  };  const handleUpdateCourse = async (e) => {    e.preventDefault();    setLoading(true);    try {      const token = localStorage.getItem('adminToken');      const response = await axios.put('http://localhost:3000/admin/courseupdate', {        CourseId: editingCourse._id,        title: courseForm.title,        description: courseForm.description,        price: parseFloat(courseForm.price),        imageUrl: courseForm.imageUrl      }, {        headers: { token }      });      if (response.data.message === 'Course updated successfully') {        setCourseForm({ title: '', description: '', price: '', imageUrl: '' });        setEditingCourse(null);        fetchCourses();        alert('Course updated successfully!');      }    } catch (error) {      alert('Failed to update course');    } finally {      setLoading(false);    }  };  const handleEdit = (course) => {    setEditingCourse(course);    setCourseForm({      title: course.title,      description: course.description,      price: course.price.toString(),      imageUrl: course.imageUrl || ''    });    setShowCreateForm(true);  };  const handleFormChange = (e) => {    setCourseForm({      ...courseForm,      [e.target.name]: e.target.value    });  };  const resetForm = () => {    setCourseForm({ title: '', description: '', price: '', imageUrl: '' });    setEditingCourse(null);    setShowCreateForm(false);  };  if (loading && courses.length === 0) {    return (      <div className="min-h-screen page-content flex items-center justify-center">        <div className="loading-spinner" style={{ width: '60px', height: '60px' }}></div>      </div>    );  }  return (    <div className="min-h-screen bg-gray-50 page-content">      <div className="container py-8">        <div className="flex justify-between items-center mb-8">          <div>            <h1 className="text-3xl font-bold text-gray-900">Admin Dashboard</h1>            <p className="text-gray-600 mt-2">Manage your StackVerse courses</p>          </div>          <button            onClick={() => setShowCreateForm(!showCreateForm)}            className="btn btn-primary"          >            {showCreateForm ? 'Cancel' : 'Create Course'}          </button>        </div>        {/* Course Form */}        {showCreateForm && (          <div className="card mb-8">            <div className="card-content">              <h2 className="text-xl font-bold text-gray-900 mb-4">                {editingCourse ? 'Edit Course' : 'Create New Course'}              </h2>              <form onSubmit={editingCourse ? handleUpdateCourse : handleCreateCourse} className="space-y-4">                <div className="grid md:grid-cols-2 gap-4">                  <div className="form-group">                    <label className="form-label">Course Title</label>                    <input                      type="text"                      name="title"                      value={courseForm.title}                      onChange={handleFormChange}                      required                      className="form-input"                      placeholder="Enter course title"                    />                  </div>                  <div className="form-group">                    <label className="form-label">Price ($)</label>                    <input                      type="number"                      name="price"                      value={courseForm.price}                      onChange={handleFormChange}                      required                      min="0"                      step="0.01"                      className="form-input"                      placeholder="Enter price"                    />                  </div>                </div>                                <div className="form-group">                  <label className="form-label">Description</label>                  <textarea                    name="description"                    value={courseForm.description}                    onChange={handleFormChange}                    required                    rows={4}                    className="form-input form-textarea"                    placeholder="Enter course description"                  />                </div>                                <div className="form-group">                  <label className="form-label">Image URL (optional)</label>                  <input                    type="url"                    name="imageUrl"                    value={courseForm.imageUrl}                    onChange={handleFormChange}                    className="form-input"                    placeholder="Enter image URL"                  />                </div>                                <div className="flex gap-4">                  <button                    type="submit"                    disabled={loading}                    className="btn btn-primary"                  >                    {loading ? 'Saving...' : (editingCourse ? 'Update Course' : 'Create Course')}                  </button>                  <button                    type="button"                    onClick={resetForm}                    className="btn btn-secondary"                  >                    Cancel                  </button>                </div>              </form>            </div>          </div>        )}        {/* Error Message */}        {error && (          <div className="alert alert-error mb-8">            {error}          </div>        )}        {/* Courses Grid */}        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">          {courses.map((course) => (            <div key={course._id} className="card">              <div className="card-image">                {course.imageUrl ? (                  <img                    src={course.imageUrl}                    alt={course.title}                    className="w-full h-full object-cover"                    onError={(e) => {                      e.target.style.display = 'none';                      e.target.nextSibling.style.display = 'flex';                    }}                  />                ) : null}                <div                   className="w-full h-full bg-primary flex items-center justify-center text-white"                  style={{ display: course.imageUrl ? 'none' : 'flex' }}                >                  <div className="text-center">                    <div className="text-4xl mb-2">ðŸ“š</div>                    <p className="font-medium">Course</p>                  </div>                </div>              </div>                            <div className="card-content">                <h3 className="text-lg font-bold text-gray-900 mb-2">{course.title}</h3>                <p className="text-gray-600 mb-4 text-sm" style={{                   display: '-webkit-box',                  WebkitLineClamp: 3,                  WebkitBoxOrient: 'vertical',                  overflow: 'hidden'                }}>                  {course.description}                </p>                                <div className="flex items-center justify-between mb-4">                  <div className="text-xl font-bold text-primary">                    ${course.price}                  </div>                </div>                                <button                  onClick={() => handleEdit(course)}                  className="btn btn-secondary w-full btn-sm"                >                  Edit Course                </button>              </div>            </div>          ))}        </div>        {/* Empty State */}        {courses.length === 0 && !loading && (          <div className="text-center py-12">            <div className="card max-w-md mx-auto">              <div className="card-content text-center">                <div className="text-6xl mb-4">ðŸ“š</div>                <h3 className="text-xl font-semibold text-gray-900 mb-2">No courses yet</h3>                <p className="text-gray-600 mb-6">Create your first course to get started!</p>                <button                  onClick={() => setShowCreateForm(true)}                  className="btn btn-primary"                >                  Create Course                </button>              </div>            </div>          </div>        )}      </div>    </div>  );};export default AdminDashboard;